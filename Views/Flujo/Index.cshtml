@model IEnumerable<sism.Models.Flujo>

@{
    ViewData["Title"] = "Flujo";
}

<!-- Contenido de la Pagina -->
<div class="content-wrapper">
    <!-- Contenido del Encabezado (Pagina del Encabezado) -->
    <section class="content-header">
        <div class="container-fluid">
            <div class="row mb-2">
                <div class="col-sm-6">
                    <h1>FLUJO(CuFt/s)</h1>
                </div>
                <div class="col-sm-6">
                    <ol class="breadcrumb float-sm-right">
                        <li class="breadcrumb-item"><a href="#">Inicio</a></li>
                        <li class="breadcrumb-item active">Flujo</li>
                    </ol>
                </div>
            </div>
        </div>
    </section>

    <!-- Contenido Principal -->
    <section class="content">
        <div class="row mt-2">
            <div class="col-sm-12">
                <div class="card">
                    <div class="card-header">Resumen Flujo</div>
                    <div class="card-body">
                        <canvas id="chartFlujo" style="max-height:250px"></canvas>
                    </div>
                </div>
            </div>
        </div>
        <div class="container-fluid">
            <div class="row">
                <div class="col-12">
                    <div class="card">
                    </div>


                    <div class="card">
                        <div class="card-header">
                            <h3 class="card-title">Listado</h3>
                        </div>

                        <div class="card-body">
                            <table id="flujo" class="table-bordered table-striped" width="100%">
                                <thead>
                                    <tr>
                                        <th>
                                            @Html.DisplayNameFor(model => model.Hora)
                                        </th>
                                        <th>
                                            @Html.DisplayNameFor(model => model.Valor)
                                        </th>
                                       
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var item in Model)
                                    {
                                        <tr>
                                            <td>
                                                @Html.DisplayFor(modelItem => item.Hora)
                                            </td>
                                            <td>
                                                @Html.DisplayFor(modelItem => item.Valor)
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>

                    </div>



                </div>

            </div>

        </div>

    </section>
    <!-- /.contenido -->

</div>


@section Scripts{
    <script>
        function resumenFlujo() {
            fetch("../Flujo/resumenFlujoHora")
            .then((response) => {
                return response.ok ? response.json() : Promise.reject(response);
            })
            .then((dataJson) => {
                console.log(dataJson)

                const labels = dataJson.map((item) => { return item.hora })
                const values = dataJson.map((item) => { return item.valor })

                console.log(labels)
                console.log(values)

                    const data = {
                        labels: labels,
                        datasets: [{
                            label: 'Valor',
                            data: values,
                            fill: false,
                            borderColor: 'rgb(35, 169, 163)',
                            tension: 0.1
                        }]
                    };

                    const config = {
                        type: 'line',
                        data: data,
                        options: {
                            scales: {
                                xAxes: [{
                                    type: 'time',
                                    time: {
                                        unit: 'second',
                                        displayFormats: {
                                            second: 'MM/D h:MM:SS'
                                        }
                                    },

                                    ticks: {
                                        fontSize: 14
                                    }
                                }],

                                yAxes: [{
                                    ticks: {
                                        fontSize: 15
                                    }
                                }]
                            }
                        }
                    };

                const canvasRadar = document.getElementById("chartFlujo");
                const graficoRadar = new Chart(canvasRadar, config)

            }).catch((error) => {
                console.log("error")
            })
                }

        $(document).ready(() => {
            resumenFlujo()
        })

    </script>

}